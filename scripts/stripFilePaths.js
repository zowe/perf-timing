/**
 * @file
 * 
 * This script will navigate through the typedoc output files and strip out any
 * local file path comments specified in the "Defined in blah" section of doc.
 * This is important because types that we don't define (I.E node_modules/@types)
 * are documented as "C:/path/to/declaration/node_module/file" which is system
 * dependent.
 */

const fs = require("fs");
const path = require("path");

(async () => {
    const docDirectory = path.join(__dirname, path.relative(__dirname, require(path.join(__dirname, "../typedoc.json")).out));
    console.log(`Typedoc output directory: ${docDirectory}`);

    console.log("Cleaning up TypeDoc output");
    await recursiveSearch(docDirectory, "html");
})();

/**
 * Strips out the names generated by stupid typedoc that are local file paths.
 * Because stupid typedoc is stupid
 * 
 * @param {string} fileName The string name of file with data to replace.
 * 
 * @return {Promise<boolean>} A promise indicating success.
 */
function sanitizeFile(fileName) {
    return new Promise((resolve, reject) => {
        fs.readFile(fileName, 'utf8', function(err,data){
            if (err) {
                console.error(err);
                reject(err);
            } else {
                var result = data.replace(/^(.*?Defined in )(.*?)(node_modules.*)$/gm, function(substring, p1, p2, p3) {
                    const replaceVal = p1 + p3;
        
                    console.log(`\treplacing ${substring.trim()} with ${replaceVal.trim()}`);
                    return replaceVal;
                });
            
                fs.writeFile(fileName, result, 'utf8', function (err) {
                    if (err) {
                        console.error(err);
                        reject(err);
                    } else {
                        resolve(true);
                    }
                 });
            }
        });
    })
}

/**
 * Recursively search through and replace text in the specified directory filtering
 * on the extension.
 * 
 * @param {string} base The base directory
 * @param {srting} ext The file extension to filter
 */
async function recursiveSearch(base,ext) {
    const files = fs.readdirSync(base);

    for (const fileIndex in files) {
        const file = files[fileIndex];
        const newBase = path.join(base,file);

        if (fs.statSync(newBase).isDirectory()) {
            recursiveSearch(newBase,ext);
        }
        else {
            if (file.substr(-1*(ext.length+1)) == '.' + ext){
                console.log(`Processing: ${newBase}`);
                await sanitizeFile(newBase);
                console.log("");
            }
        }
    };
}